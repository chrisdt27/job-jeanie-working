// pages/api/generate-negotiation-advice.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';
import { getAuth } from '@clerk/nextjs/server';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { userId } = getAuth(req);
  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { jobId, bidId } = req.body;

  if (!jobId || !bidId) {
    return res.status(400).json({ error: 'Missing jobId or bidId' });
  }

  try {
    // Fetch job details
    const { data: job, error: jobError } = await supabase
      .from('jobs')
      .select('title, description, budget, urgency, is_urgent')
      .eq('id', jobId)
      .single();

    if (jobError || !job) {
      console.error('Job fetch error:', jobError);
      return res.status(404).json({ error: 'Job not found' });
    }

    // Fetch bid details
    const { data: bid, error: bidError } = await supabase
      .from('bids')
      .select('bid_amount, timeline, notes')
      .eq('id', bidId)
      .single();

    if (bidError || !bid) {
      console.error('Bid fetch error:', bidError);
      return res.status(404).json({ error: 'Bid not found' });
    }

    // Construct prompt
    const prompt = `
You are Jeanie AI, an expert negotiation advisor for homeowners on a service contracting platform.

Analyze the following:
- Job Title: ${job.title}
- Description: ${job.description || 'No description provided.'}
- Budget: ${job.budget ? `$${job.budget}` : 'Not provided'}
- Urgency: ${job.is_urgent ? 'Urgent' : job.urgency || 'Not specified'}

Bid received:
- Amount: $${bid.bid_amount}
- Timeline: ${bid.timeline}
- Contractor note: ${bid.notes}

Based on market norms, quality, and the job's urgency, provide:
1. Recommendation: Accept, Counter, or Reject.
2. If Counter, suggest a counter-offer amount and timeline.
3. A short explanation in plain English for the owner.

Respond in this JSON format:
{
  "recommendation": "<Accept | Counter | Reject>",
  "counter_offer": {
    "amount": "<suggested amount if countering>",
    "timeline": "<suggested timeline if countering>"
  },
  "explanation": "<short explanation>"
}
`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'system', content: prompt }],
    });

    const content = completion.choices[0].message.content?.trim();

    if (!content) {
      return res.status(500).json({ error: 'No content generated by Jeanie AI' });
    }

    try {
      const advice = JSON.parse(content);
      return res.status(200).json(advice);
    } catch (parseError) {
      console.error('JSON parse error:', parseError, 'Raw content:', content);
      return res.status(500).json({ error: 'Failed to parse AI response.' });
    }
  } catch (error: any) {
    console.error('Jeanie AI negotiation advisor error:', error.message);
    return res.status(500).json({ error: 'Server error generating negotiation advice.' });
  }
}
